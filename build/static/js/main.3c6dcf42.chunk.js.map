{"version":3,"sources":["Components/SearchBar.js","Components/VideoDetail.js","Components/VideoItem.js","Components/VideoList.js","api/youtube.js","App.js","serviceWorker.js","index.js"],"names":["onSubmit","useState","searchTerm","setSearchTerm","Paper","elevation","style","padding","TextField","fullWidth","label","value","onChange","event","target","onKeyPress","key","video","videoSrc","id","videoId","Fragment","height","frameBorder","width","title","src","Typography","variant","snippet","channelTitle","description","onVideoSelect","Grid","item","xs","display","alignItems","cursor","onClick","marginRight","alt","thumbnails","medium","url","VideoList","videos","map","VideoItem","axios","create","baseURL","setVideos","selectedVideo","setSelectedVideo","justifyContent","container","spacing","SearchBar","VideoDetail","a","youtube","get","params","part","maxResults","q","data","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c6dcf42.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Paper, TextField } from \"@material-ui/core\";\r\n\r\nexport default ({ onSubmit }) => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const handleChange = (event) => setSearchTerm(event.target.value);\r\n\r\n  const onKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      onSubmit(searchTerm);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper elevation={6} style={{ padding: \"25px\" }}>\r\n      <TextField\r\n        fullWidth\r\n        label=\"Search...\"\r\n        value={searchTerm}\r\n        onChange={handleChange}\r\n        onKeyPress={onKeyPress}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n\r\nexport default ({ video }) => {\r\n  if (!video) return <div>Loading...</div>;\r\n\r\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper elevation={6} style={{ height: \"75vh\" }}>\r\n        <iframe\r\n          frameBorder=\"0\"\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          title=\"Video Player\"\r\n          src={videoSrc}\r\n        />\r\n      </Paper>\r\n      <Paper elevation={6} style={{ padding: \"15px\" }}>\r\n        <Typography variant=\"h4\">\r\n          {video.snippet.title} - {video.snippet.channelTitle}\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\">\r\n          {video.snippet.channelTitle}\r\n        </Typography>\r\n        <Typography variant=\"subtitle2\">{video.snippet.description}</Typography>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\r\n\r\nexport default ({ video, onVideoSelect }) => {\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Paper style={{ display: \"flex\", alignItems: \"center\", cursor: \"pointer\" }} onClick={() => onVideoSelect(video)} >\r\n        <img style={{ marginRight: \"20px\" }} alt=\"thumbnail\" src={video.snippet.thumbnails.medium.url} />\r\n        <Typography variant=\"subtitle1\">\r\n          <b>{video.snippet.title}</b>\r\n        </Typography>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport VideoItem from \"./VideoItem\";\r\n\r\nconst VideoList = ({ videos, onVideoSelect }) => {\r\n  const listOfVideos = videos.map(video => (\r\n    <VideoItem\r\n      onVideoSelect={onVideoSelect}\r\n      key={video.id.videoId}\r\n      video={video}\r\n    />\r\n  ));\r\n\r\n  return (\r\n   \r\n      listOfVideos\r\n    \r\n  );\r\n}\r\nexport default VideoList;","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://www.googleapis.com/youtube/v3',\r\n});","import React, { useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\n\nimport { SearchBar, VideoList, VideoDetail } from \"./Components/Index\";\n\nimport youtube from \"./api/youtube\";\n\nexport default () => {\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n\n  return (\n    <Grid style={{ justifyContent: \"center\" }} container spacing={10}>\n      <Grid item xs={11}>\n        <Grid container spacing={10}>\n          <Grid item xs={12}>\n            <SearchBar onSubmit={handleSubmit} />\n          </Grid>\n          <Grid item xs={8}>\n            <VideoDetail video={selectedVideo} />\n          </Grid>\n          <Grid item xs={4}>\n            <VideoList videos={videos} onVideoSelect={setSelectedVideo} />\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n\n  async function handleSubmit(searchTerm) {\n    const { data: { items: videos } } = await youtube.get(\"search\", {\n      params: {\n        part: \"snippet\",\n        maxResults: 5,\n        key: 'AIzaSyCFAkM1zkw1MGKKGyusi7LdDBo7jMNvlIQ',\n        q: searchTerm,\n      }\n    });\n\n    setVideos(videos);\n    setSelectedVideo(videos[0]);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}